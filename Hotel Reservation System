{ Define Room and Reservation Classes}

import java.util.*;

class Room {
    private String roomNumber;
    private String category;
    private double price;
    private boolean isAvailable;

    public Room(String roomNumber, String category, double price) {
        this.roomNumber = roomNumber;
        this.category = category;
        this.price = price;
        this.isAvailable = true;
    }

    public String getRoomNumber() {
        return roomNumber;
    }

    public String getCategory() {
        return category;
    }

    public double getPrice() {
        return price;
    }

    public boolean isAvailable() {
        return isAvailable;
    }

    public void setAvailable(boolean available) {
        isAvailable = available;
    }

    @Override
    public String toString() {
        return "Room " + roomNumber + " (" + category + ") - $" + price + " - " + (isAvailable ? "Available" : "Not Available");
    }
}

class Reservation {
    private String roomNumber;
    private String guestName;
    private String date;

    public Reservation(String roomNumber, String guestName, String date) {
        this.roomNumber = roomNumber;
        this.guestName = guestName;
        this.date = date;
    }

    public String getRoomNumber() {
        return roomNumber;
    }

    public String getGuestName() {
        return guestName;
    }

    public String getDate() {
        return date;
    }

    @Override
    public String toString() {
        return "Reservation: Room " + roomNumber + " for " + guestName + " on " + date;
    }
}


{Define the Hotel Management System}

public class HotelReservationSystem {
    private Map<String, Room> rooms;
    private List<Reservation> reservations;

    public HotelReservationSystem() {
        rooms = new HashMap<>();
        reservations = new ArrayList<>();
        initializeRooms();
    }

    private void initializeRooms() {
        rooms.put("101", new Room("101", "Single", 100.00));
        rooms.put("102", new Room("102", "Double", 150.00));
        rooms.put("201", new Room("201", "Suite", 250.00));
        rooms.put("202", new Room("202", "Suite", 250.00));
    }

    public void searchAvailableRooms() {
        System.out.println("Available Rooms:");
        for (Room room : rooms.values()) {
            if (room.isAvailable()) {
                System.out.println(room);
            }
        }
    }

    public boolean makeReservation(String roomNumber, String guestName, String date) {
        Room room = rooms.get(roomNumber);
        if (room != null && room.isAvailable()) {
            room.setAvailable(false);
            reservations.add(new Reservation(roomNumber, guestName, date));
            System.out.println("Reservation made successfully.");
            return true;
        } else {
            System.out.println("Room is not available.");
            return false;
        }
    }

    public void viewReservations() {
        System.out.println("Current Reservations:");
        for (Reservation reservation : reservations) {
            System.out.println(reservation);
        }
    }

    public void processPayment(double amount) {
        System.out.printf("Processing payment of $%.2f%n", amount);
        // Simple simulation of payment processing
        System.out.println("Payment processed successfully.");
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        HotelReservationSystem hotel = new HotelReservationSystem();

        while (true) {
            System.out.println("\n1. Search for Available Rooms");
            System.out.println("2. Make a Reservation");
            System.out.println("3. View Reservations");
            System.out.println("4. Process Payment");
            System.out.println("5. Exit");
            System.out.print("Choose an option: ");
            int option = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (option) {
                case 1:
                    hotel.searchAvailableRooms();
                    break;
                case 2:
                    System.out.print("Enter room number: ");
                    String roomNumber = scanner.nextLine();
                    System.out.print("Enter guest name: ");
                    String guestName = scanner.nextLine();
                    System.out.print("Enter date (YYYY-MM-DD): ");
                    String date = scanner.nextLine();
                    hotel.makeReservation(roomNumber, guestName, date);
                    break;
                case 3:
                    hotel.viewReservations();
                    break;
                case 4:
                    System.out.print("Enter amount to process: ");
                    double amount = scanner.nextDouble();
                    scanner.nextLine(); // Consume newline
                    hotel.processPayment(amount);
                    break;
                case 5:
                    System.out.println("Exiting...");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
    }
}
